/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(device.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(fc36021f21d71209a49c7c5a6436cb35)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <osmosdr/device.h>
// pydoc.h is automatically generated in the build directory
#include <device_pydoc.h>

void bind_device(py::module& m)
{

    using device_t    = ::osmosdr::device_t;
    using device    = ::osmosdr::device;


    py::class_<device_t, std::map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>>,
        std::shared_ptr<device_t>>(m, "device_t", D(device_t))

        .def(py::init<std::string const &>(),           py::arg("args") = "",
           D(device_t,device_t,0)
        )
        .def(py::init<osmosdr::device_t const &>(),           py::arg("arg0"),
           D(device_t,device_t,1)
        )


        
        .def("to_pp_string",&device_t::to_pp_string,       
            D(device_t,to_pp_string)
        )


        
        .def("to_string",&device_t::to_string,       
            D(device_t,to_string)
        )

        ;


    py::class_<device, boost::noncopyable,
        std::shared_ptr<device>>(m, "device", D(device))

        .def(py::init<>(),D(device,device))


        
        .def_static("find",&device::find,       
            py::arg("hint") = osmosdr::device_t(),
            D(device,find)
        )

        ;




}








