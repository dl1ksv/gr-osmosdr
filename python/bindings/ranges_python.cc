/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(1)                                                       */
/* BINDTOOL_USE_PYGCCXML(1)                                                        */
/* BINDTOOL_HEADER_FILE(ranges.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(1ffc8cd5b4dac7b5a3adb0c52804a11b)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <osmosdr/ranges.h>
// pydoc.h is automatically generated in the build directory
#include <ranges_pydoc.h>

void bind_ranges(py::module& m)
{

    using range_t    = osmosdr::range_t;

    py::class_<range_t,
        std::shared_ptr<range_t>>(m, "range_t", D(range_t))

        .def(py::init<double>(),           py::arg("value") = 0,
           D(range_t,range_t,0)
        )
        .def(py::init<double,double,double>(),           py::arg("start"),
           py::arg("stop"),
           py::arg("step") = 0,
           D(range_t,range_t,1)
        )
        .def(py::init<osmosdr::range_t const &>(),           py::arg("arg0"),
           D(range_t,range_t,2)
        )


        
        .def("start",&range_t::start,       
            D(range_t,start)
        )


        
        .def("stop",&range_t::stop,       
            D(range_t,stop)
        )


        
        .def("step",&range_t::step,       
            D(range_t,step)
        )


        
        .def("to_pp_string",&range_t::to_pp_string,       
            D(range_t,to_pp_string)
        )

        ;

/**
    py::class_<meta_range_t, std::vector<osmosdr::range_t, std::allocator<osmosdr::range_t>>,
        std::shared_ptr<meta_range_t>>(m, "meta_range_t", D(meta_range_t))

        .def(py::init<>(),D(meta_range_t,meta_range_t,0))
        .def(py::init<double,double,double>(),           py::arg("start"),
           py::arg("stop"),
           py::arg("step") = 0,
           D(meta_range_t,meta_range_t,1)
        )
        .def(py::init<osmosdr::meta_range_t const &>(),           py::arg("arg0"),
           D(meta_range_t,meta_range_t,2)
        )


        
        .def("start",&meta_range_t::start,       
            D(meta_range_t,start)
        )


        
        .def("stop",&meta_range_t::stop,       
            D(meta_range_t,stop)
        )


        
        .def("step",&meta_range_t::step,       
            D(meta_range_t,step)
        )


        
        .def("clip",&meta_range_t::clip,       
            py::arg("value"),
            py::arg("clip_step") = false,
            D(meta_range_t,clip)
        )


        
        .def("values",&meta_range_t::values,       
            D(meta_range_t,values)
        )


        
        .def("to_pp_string",&meta_range_t::to_pp_string,       
            D(meta_range_t,to_pp_string)
        )

        ;
*/



}








